@use "sass:meta";
@use "sass:color";
@use "sass:map";
@use "sass:list";

@mixin ThemeColor($selector, $hex, $contrast, $generate-extras, $steps) {
    --theme-#{$selector}: #{$hex};
    --theme-#{$selector}-contrast: #{$contrast};
    --theme-#{$selector}-rgb: #{color.channel($hex, "red", $space: rgb), color.channel($hex, "green", $space: rgb), color.channel($hex, "blue", $space: rgb)};
    --theme-#{$selector}-contrast-rgb: #{color.channel($contrast, "red", $space: rgb), color.channel($contrast, "green", $space: rgb), color.channel($contrast, "blue", $space: rgb)};

    @if ($generate-extras) {
        @if ($steps) {

            @each $step,
            $value in $steps {
                @include ColorStep($selector, $step, $hex, $value);
            }
        }

        @else {
            @include ColorStep($selector, 'lighter', $hex, 25%);
            @include ColorStep($selector, 'light', $hex, 15%);
            @include ColorStep($selector, 'dark', $hex, -15%);
            @include ColorStep($selector, 'darker', $hex, -25%);
        }
    }
}

@mixin ColorStep($selector, $step, $hex, $value) {
    $color: color.channel($hex, "adjust", $space: rgb, $lightness: $value);
    --theme-#{$selector}-#{$step}: #{$color};
}

@mixin GeneratePalette($palette, $steps) {

    @each $selector,
    $colours in $palette {
        $length: list.length($colours);

        @if $length >2 {
            @include ThemeColor($selector, list.nth($colours, 1), list.nth($colours, 2), list.nth($colours, 3), $steps);
        }

        @else {
            @include ThemeColor($selector, list.nth($colours, 1), list.nth($colours, 2), false, $steps);
        }

    }
}

@mixin GenerateVariables($variables) {
    @each $selector,
    $variable in $variables {
        --theme-v-#{$selector}: #{$variable};
    }
}

@function Color($selector, $modifier: false) {
    @if ($modifier) {
        @if (meta.type-of($modifier)=='number') {
            @return rgba(var(--theme-#{$selector}-rgb), #{$modifier});
        }

        @else {
            @return var(--theme-#{$selector}-#{$modifier});
        }
    }

    @else {
        @return var(--theme-#{$selector});
    }
}

@function C($selector, $modifier: false) {
    @return Color($selector, $modifier);
}

@function Text($selector, $modifier: false) {
    @return Color($selector + "-contrast", $modifier);
}

@function Contrast($selector, $modifier: false) {
    @return Text($selector, $modifier);
}

@function T($selector, $modifier: false) {
    @return Text($selector, $modifier);
}

@function Variable($selector, $default: 'unset') {
    @return var(--theme-v-#{$selector}, #{$default});
}

@function Var($selector, $default: 'unset') {
    @return Variable($selector, $default);
}

@function V($selector, $default: 'unset') {
    @return Variable($selector, $default);
}

// Use and render the theme variables as css
@mixin UseTheme($theme) {
    $_light: map.get($theme, "light");
    $_dark: map.get($theme, "dark");
    $_steps: map.get($theme, "steps");
    $_variables: map.get($theme, "variables");

    :root {
        color-scheme: light;
        @include GeneratePalette($_light, $_steps);
        @include GenerateVariables($_variables);

        @if $_light {
            @media (prefers-color-scheme: light) {
                &:has(body:not([data-theme='dark'])) {
                    color-scheme: light;
                    @include GeneratePalette($_light, $_steps);
                }
            }

            &:has(body[data-theme='light']) {
                color-scheme: light;
                @include GeneratePalette($_light, $_steps);
            }
        }

        @if $_dark {
            @media (prefers-color-scheme: dark) {
                &:has(body:not([data-theme='light'])) {
                    color-scheme: dark;
                    @include GeneratePalette($_dark, $_steps);
                }
            }

            &:has(body[data-theme='dark']) {
                color-scheme: dark;
                @include GeneratePalette($_dark, $_steps);
            }
        }
    }
}

@mixin LightMode {
    @media (prefers-color-scheme: light) {
        body:not([data-theme='dark']) & {
            @content;
        }
    }
    
    body[data-theme='light'] & {
        @content;
    }
}

@mixin DarkMode {
    @media (prefers-color-scheme: dark) {
        body:not([data-theme='light']) & {
            @content;
        }
    }

    body[data-theme='dark'] & {
        @content;
    }
}

@mixin ReducedMotion {
    @media (prefers-reduced-motion) {
        @content;
    }
}

@mixin Landscape {
    @media (orientation: landscape) {
        @content;
    }
}

@mixin Portrait {
    @media (orientation: portrait) {
        @content;
    }
}

@mixin JavaScriptDisabled {
    @media (scripting: none) {
        @content;
    }
}

@mixin JavaScriptEnabled {
    @media (scripting: enabled) {
        @content;
    }
}

@mixin MobileTiny {
    @media screen and (max-width: 375px) {
        @content;
    }
}

@mixin Mobile {
    @media screen and (max-width: 768px) {
        @content;
    }
}

@mixin Tablet {
    @media screen and (max-width: 1024px) {
        @content;
    }
}

@mixin NotMobile {
    @media screen and (min-width: 768px) {
        @content;
    }
}